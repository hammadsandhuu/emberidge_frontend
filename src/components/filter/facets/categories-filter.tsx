import {Checkbox} from "@/components/shared/form/checkbox";import { usePanel } from "@/hooks/use-panel";import { colorMap } from "@/data/color-settings";import {ChevronDown, ChevronUp} from "lucide-react";export interface CategoryOption {    id: string    label: string    count: number    subCategories?: CategoryOption[]}interface CategoriesFilterProps {    categories: CategoryOption[]    selectedCategories: Record<string, boolean>    expandedCategories?: Record<string, boolean>    onCategoryChange: (id: string, checked: boolean) => void    onCategoryExpand?: (id: string) => void}export function CategoriesFilter({                                     categories,                                     selectedCategories,                                     expandedCategories,                                     onCategoryChange,                                     onCategoryExpand,                                 }: CategoriesFilterProps) {    const { selectedColor } = usePanel();    return (        <div className="space-y-4">            {categories.map((category) => (                <div key={category.id} className="space-y-2">                    <div className="flex items-start justify-center ">                        <Checkbox                            id={`category-${category.id}`}                            checked={selectedCategories[category.id] || false}                            onCheckedChange={(checked) => onCategoryChange(category.id, checked)}                        />                        <div className="ps-2.5   flex-1 flex items-center justify-between">                            <label htmlFor={`category-${category.id}`} className={`text-sm leading-none cursor-pointer group`}>                                <span className={` ${colorMap[selectedColor].groupHoverLink}`}>{category.label}</span>                                <span className="text-gray-500"> ({category.count})</span>                            </label>                                                                                    {onCategoryExpand && category.subCategories && category.subCategories.length > 0 && (                                                                <button                                    onClick={() => onCategoryExpand(category.id)}                                    className="h-4 w-4 flex items-center justify-center"                                >                                    {expandedCategories && expandedCategories[category.id] ? <ChevronUp/> :                                        <ChevronDown />}                                </button>                            )}                        </div>                    </div>                                        {category.subCategories && expandedCategories && expandedCategories[category.id] && (                        <div className="ml-6 my-5 space-y-4">                            {category.subCategories.map((subCategory) => (                                <div key={subCategory.id} className="flex items-start">                                    <Checkbox                                        id={`category-${subCategory.id}`}                                        checked={selectedCategories[subCategory.id] || false}                                        onCheckedChange={(checked) => onCategoryChange(subCategory.id, checked)}                                    />                                    <label htmlFor={`category-${subCategory.id}`}                                           className="ps-2.5  text-sm leading-none cursor-pointer group">                                        <span                                            className={`text-slate-900 dark:text-slate-100 ${colorMap[selectedColor].groupHoverLink}`}>{subCategory.label}</span>                                        <span className="text-gray-500"> ({subCategory.count})</span>                                    </label>                                </div>                            ))}                        </div>                    )}                </div>            ))}        </div>    )}